/*
    LAB SDC2
*/

#include <string.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>       // nanosleep()
#include <stdbool.h>
       #include <unistd.h>

#define MAX_N_DEVICE        32

#define BUFFER_SIZE         MAX_N_DEVICE

#define INITIAL_DEPOSIT     0
#define MAX_TRANSACTION     1000
#define NUM_CONSUMERS       1
#define NUM_PRODUCERS       1
#define PRNG_SEED           0

#define NUM_OPERATIONS      400
#define OPS_PER_CONSUMER    (NUM_OPERATIONS/NUM_CONSUMERS)
#define OPS_PER_PRODUCER    (NUM_OPERATIONS/NUM_PRODUCERS)

// we use the preprocessor to check if our parameters are okay
#if OPS_PER_CONSUMER*NUM_CONSUMERS != OPS_PER_PRODUCER*NUM_PRODUCERS
#error "Choose NUM_CONSUMERS and NUM_PRODUCERS so that we get exactly NUM_OPERATIONS operations"
#endif

sem_t empty_sem, fill_sem;

// struct used to specify arguments for a thread
typedef struct {
    int threadId;
    int numOps;
} thread_args_t;

// shared data
int transactions[BUFFER_SIZE];
int deposit = INITIAL_DEPOSIT;
int read_index, write_index;

bool producer_run = false;
bool consumer_run = false;

// producer thread
void* performTransactions(void* x) {
    thread_args_t* args = (thread_args_t*)x;
    printf("Starting producer thread: Refresh Device %d\n", args->threadId);
    producer_run = true;

    int tmp = 0;
    int tmp_index = 0;
    while (producer_run) {
        // make sure there is space in the buffer
        if (sem_wait(&empty_sem)) {
            fprintf(stderr, "sem_wait error\n"); exit(EXIT_FAILURE);
        }

        if(!producer_run)break;

        // produce the item
        int currentTransaction = 0;

        // write the item and update write_index accordingly
        transactions[write_index] = currentTransaction;

        tmp = transactions[write_index];
        tmp_index = write_index;

        //circular buffer
        write_index = (write_index + 1) % BUFFER_SIZE;

        // notify that a new element just became available
        if (sem_post(&fill_sem)) {
            fprintf(stderr, "sem_post error\n"); exit(EXIT_FAILURE);
        }
        printf("HNSRefresh: index:%d data:%d\n",  tmp_index, tmp);

        usleep(100);

    }

    //wake up other thread
    if (sem_post(&fill_sem)) {
        fprintf(stderr, "sem_post error\n"); exit(EXIT_FAILURE);
    }
    free(args);
    pthread_exit(NULL);

}

void* processTransactions(void* x) {
    thread_args_t* args = (thread_args_t*)x;
    printf("Starting consumer thread: MQTTPublish %d\n", args->threadId);
    consumer_run = true;
    int tmp = 0;
    int tmp_index = 0;
    while (consumer_run) {
        // make sure there is data to consume
        if (sem_wait(&fill_sem)) {
            fprintf(stderr, "sem_wait error\n"); exit(EXIT_FAILURE);
        }
        if(!consumer_run) break;

        // consume the item and update (shared) variable deposit
       tmp = transactions[read_index];
       tmp_index = read_index;

        read_index = (read_index + 1) % BUFFER_SIZE;
      
        // notify that a free cell in the buffer just became available
        if (sem_post(&empty_sem)) {
            fprintf(stderr, "sem_post error\n"); exit(EXIT_FAILURE);
        }

        printf("MQTTPublish: index:%d data:%d\n",  tmp_index, tmp);
    }

    // wake up other thread
    if (sem_post(&empty_sem)) {
        fprintf(stderr, "sem_post error\n"); exit(EXIT_FAILURE);
    }
    free(args);
    pthread_exit(NULL);
}

int main(int argc, char* argv[]) {

    // initialize read and write indexes
    read_index  = 0;
    write_index = 0;

    // initialize semaphores
    if (sem_init(&fill_sem, 0, 0)) { fprintf(stderr, "sem_init error\n"); exit(EXIT_FAILURE); } 
    if (sem_init(&empty_sem, 0, BUFFER_SIZE)) { fprintf(stderr, "sem_init error\n"); exit(EXIT_FAILURE); } 

    int ret;
    //pthread_t producer[NUM_PRODUCERS], consumer[NUM_CONSUMERS];
    pthread_t producer, consumer;

 //   int i;
  //  for (i=0; i<NUM_PRODUCERS; ++i) {
        thread_args_t* arg = malloc(sizeof(thread_args_t));
        arg->threadId ==0;//arg->threadId = i;
        arg->numOps = 0;//OPS_PER_PRODUCER;

        ret = pthread_create(&producer, NULL, performTransactions, arg);
        if (ret != 0) { fprintf(stderr, "Error %d in pthread_create\n", ret); exit(EXIT_FAILURE); }
 //   }

  //  int j;
   // for (j=0; j<NUM_CONSUMERS; ++j) {
        thread_args_t* arg2 = malloc(sizeof(thread_args_t));
        arg2->threadId = 0;//j;
        arg2->numOps = 0;//OPS_PER_CONSUMER;

        ret = pthread_create(&consumer, NULL, processTransactions, arg2);
        if (ret != 0) { fprintf(stderr, "Error %d in pthread_create\n", ret); exit(EXIT_FAILURE); }
   // }

    sleep(5);
    producer_run = false;
    consumer_run = false;

    // join on threads
  //  for (i=0; i<NUM_PRODUCERS; ++i) {
        ret = pthread_join(producer, NULL);
        if (ret != 0) { fprintf(stderr, "Error %d in pthread_join\n", ret); exit(EXIT_FAILURE); }
   // }

//    for (j=0; j<NUM_CONSUMERS; ++j) {
        ret = pthread_join(consumer, NULL);
        if (ret != 0) { fprintf(stderr, "Error %d in pthread_join\n", ret); exit(EXIT_FAILURE); }
   // }

   // printf("Final value for deposit: %d\n", deposit);

    // destroy semaphores
    if (sem_destroy(&fill_sem)) { fprintf(stderr, "sem_destroy error\n"); exit(EXIT_FAILURE); } 
    if (sem_destroy(&empty_sem)) { fprintf(stderr, "sem_destroy error\n"); exit(EXIT_FAILURE); } 

    exit(EXIT_SUCCESS);
}